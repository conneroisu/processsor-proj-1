/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CopyImagePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var CopyImagePlugin = class extends import_obsidian.Plugin {
  async onload() {
    if (import_obsidian.Platform.isMobile) {
      this.registerDomEvent(
        document,
        "touchstart",
        async (evt) => {
          if (this.isImage(evt)) {
            new import_obsidian.Notice("Copying the image...");
            await this.copyImageToClipboard(evt);
          }
        }
      );
    } else {
      this.registerDomEvent(
        document,
        "contextmenu",
        async (evt) => {
          if (this.isImage(evt)) {
            try {
              new import_obsidian.Notice("Copying the image...");
              await this.trySetFocus();
              await this.waitForFocus();
              await this.copyImageToClipboard(evt);
            } catch (e) {
              new import_obsidian.Notice(e.message);
            }
          }
        }
      );
    }
  }
  onunload() {
  }
  async wait(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  isImage(evt) {
    return evt.target instanceof HTMLImageElement && evt.target.tagName === "IMG";
  }
  async trySetFocus() {
    if (!document.hasFocus()) {
      const obsidianWindow = window.open("obsidian://open", "_self");
      if (obsidianWindow) {
        obsidianWindow.focus();
      } else {
        throw new Error("Failed to focus Obsidian app.");
      }
    }
  }
  async waitForFocus() {
    let timeElapsed = 0;
    while (!document.hasFocus() && timeElapsed < 2e3) {
      await this.wait(50);
      timeElapsed += 50;
    }
    if (!document.hasFocus()) {
      throw new Error(
        "Cannot copy image to clipboard without Obsidian app focused."
      );
    }
  }
  async copyImageToClipboard(evt) {
    const target = evt.target;
    const response = await fetch(target.src);
    const imageBlob = await response.blob();
    navigator.clipboard.write([
      new ClipboardItem({
        [imageBlob.type]: imageBlob
      })
    ]).then(() => {
      new import_obsidian.Notice("Image copied to clipboard!");
    }).catch(() => {
      new import_obsidian.Notice("Failed to copy...");
    });
  }
};
